generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String   @db.VarChar(191)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  post Post[] @relation("user")

  comment Comment[] @relation("user")

  @@map("user")
}

model Post {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(100)
  description   String   @db.Text
  image         String   @db.Text
  visualization Int      @default(0)
  like          Int      @default(0)
  dislike       Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user_id Int  @unique(map: "user_id")
  User    User @relation("user", fields: [user_id], references: [id], onDelete: Cascade)

  comment Comment[] @relation("post")

  post_edit PostEdit[] @relation("post")

  @@map("post")
}

model PostEdit {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String   @db.Text
  image       String   @db.Text
  created_at  DateTime @default(now())

  post_id Int  @unique(map: "post_id")
  Post    Post @relation("post", fields: [post_id], references: [id], onDelete: Cascade)

  @@map("post_edit")
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  deleted     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user_id Int  @unique(map: "user_id")
  User    User @relation("user", fields: [user_id], references: [id], onDelete: Cascade)

  post_id Int  @unique(map: "post_id")
  Post    Post @relation("post", fields: [post_id], references: [id], onDelete: Cascade)

  @@map("comment")
}
